{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["readFile","file","Promise","resolve","reject","reader","FileReader","onload","f","data","Uint8Array","target","result","workbook","XLSX","read","type","onerror","readAsArrayBuffer","App","useState","setFile","setWorkbook","sheet","setSheet","chosenRows","setChosenRows","format","setFormat","outputRef","useRef","onDrop","useCallback","acceptedFiles","useDropzone","noClick","accept","getRootProps","getInputProps","loadExcel","isDragActive","a","wb","Object","keys","Sheets","length","chooseWorksheet","workSheet","ws","utils","sheet_to_json","forEach","key","map","e","selected","setAll","selectRow","row","newSheet","idx","className","Container","name","onClick","Row","Col","md","ListGroup","Item","action","column","value","onChange","ref","filter","replace","match","exec","join","current","select","document","execCommand","readOnly","Button","variant","Table","header","hidx","checked","values","cidx","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5803945.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport XLSX, { WorkBook, WorkSheet } from \"xlsx\";\nimport \"./App.css\";\nimport { useDropzone } from \"react-dropzone\";\nimport Table from \"react-bootstrap/Table\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\n\nconst readFile = (file: Blob): Promise<WorkBook> =>\n  new Promise<WorkBook>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = function(f) {\n      let data = new Uint8Array(f.target.result as ArrayBuffer);\n      let workbook = XLSX.read(data, { type: \"array\" });\n      resolve(workbook);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n\nconst App: React.FC = () => {\n  const [text, setText] = useState<string>(\"\");\n  const [id, setId] = useState<number>(0);\n  const [file, setFile] = useState<File>();\n  const [workbook, setWorkbook] = useState<WorkBook>(null);\n  const [sheet, setSheet] = useState<WorkSheet>(null);\n  const [chosenRows, setChosenRows] = useState<{\n    [key: string]: boolean;\n  }>(null);\n  const [format, setFormat] = useState(\"\");\n  const outputRef = useRef(null);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setFile(acceptedFiles[0]);\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    noClick: false,\n    accept: [\n      \"application/vnd.ms-excel\",\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ]\n  });\n\n  const loadExcel = async (file: File) => {\n    if (file) {\n      const wb = await readFile(file);\n      setWorkbook(wb);\n      setFile(null);\n    }\n    if (workbook && Object.keys(workbook.Sheets).length === 1) {\n      chooseWorksheet(Object.keys(workbook.Sheets)[0]);\n    }\n  };\n\n  const chooseWorksheet = (workSheet: string) => {\n    const chosenRows = {};\n    const ws: any[] = XLSX.utils.sheet_to_json(workbook.Sheets[workSheet]);\n    Object.keys(ws[0]).forEach(key => {\n      chosenRows[key] = true;\n    });\n    setChosenRows(chosenRows);\n    setSheet(ws.map(e => ({ ...e, selected: true })));\n  };\n\n  const addVariable = (variable: string) => {\n    setFormat(format + `{${variable}}`);\n  };\n\n  const parseData = (): string[] => {\n    const res = sheet\n      .filter(e => e.selected)\n      .map(row => {\n        const regex = /\\{(.*?)\\}/g;\n        return format.replace(regex, match => {\n          const bracket = /\\{(.*?)\\}/g;\n          const key = bracket.exec(match)[1];\n          return row[key] || \"-\";\n        });\n      });\n    return res;\n  };\n\n  const setAll = (selected: boolean) => {\n    setSheet(sheet.map(e => ({ ...e, selected })));\n  };\n\n  const copyToClipboard = (e: React.MouseEvent) => {\n    outputRef.current.select();\n    document.execCommand(\"copy\");\n  };\n\n  const selectRow = (row: number) => {\n    const newSheet = sheet.map((e, idx) => {\n      if (idx === row) {\n        return { ...e, selected: !e.selected };\n      } else return e;\n    });\n    setSheet(newSheet);\n  };\n  return (\n    <div className=\"App\">\n      <Container>\n        <header className=\"App-header\">\n          <h1>Easy Reg</h1>\n          <h2>Easily Export your excel data in any format</h2>\n          <div className=\"upload-zone\" {...getRootProps()}>\n            <input {...getInputProps()} />\n            <p>Choose your file here (It's not uploaded)</p>\n          </div>\n        </header>\n        {file && (\n          <>\n            <p>{file.name}</p>\n            <button onClick={() => loadExcel(file)}>Read Excel!</button>\n          </>\n        )}\n      </Container>\n      <Container>\n        <Row>\n          {workbook && (\n            <Col md={sheet ? 4 : 12}>\n              <h3>Choose worksheet</h3>\n              <ListGroup>\n                {Object.keys(workbook.Sheets).map((sheet, idx) => (\n                  <ListGroup.Item\n                    action\n                    key={`workbook-${idx}`}\n                    onClick={e => chooseWorksheet(sheet)}\n                  >\n                    {sheet}\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n              {sheet && (\n                <div>\n                  <h3>Available Variables</h3>\n                  <ListGroup>\n                    {Object.keys(sheet[0]).map((column, idx) => (\n                      <ListGroup.Item\n                        action\n                        onClick={e => addVariable(column)}\n                        key={`sample-header-${idx}`}\n                      >\n                        {column}\n                      </ListGroup.Item>\n                    ))}\n                  </ListGroup>\n                  <h4>Type Format, replace variable with {\"{<variable>}\"}</h4>\n                  <textarea\n                    value={format}\n                    onChange={e => setFormat(e.target.value)}\n                  ></textarea>\n                  <h3>Result</h3>\n                  <small>Click to copy</small>\n                  <textarea\n                    ref={outputRef}\n                    value={parseData().join(\"\\n\")}\n                    onClick={copyToClipboard}\n                    readOnly\n                  ></textarea>\n                </div>\n              )}\n            </Col>\n          )}\n          {sheet && (\n            <Col className=\"scroll-wrapper\">\n              <Button variant=\"primary\" onClick={() => setAll(true)}>\n                Select All\n              </Button>\n              <Button variant=\"danger\" onClick={() => setAll(false)}>\n                Deselect All\n              </Button>\n              <Table>\n                <thead>\n                  <tr>\n                    {Object.keys(sheet[0]).map((header, hidx) => (\n                      <th key={`h-${hidx}`}>\n                        <input\n                          type=\"checkbox\"\n                          checked={chosenRows[header]}\n                          onChange={e =>\n                            setChosenRows({\n                              ...chosenRows,\n                              [header]: !chosenRows[header]\n                            })\n                          }\n                        />{\" \"}\n                        {header}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {sheet.map((sheet, idx) => (\n                    <tr\n                      key={`r-${idx}`}\n                      className={sheet.selected ? \"selected\" : \"\"}\n                      onClick={e => selectRow(idx)}\n                    >\n                      {Object.values(sheet).map((value, cidx) => (\n                        <td key={`r-${idx}-c-${cidx}`}>{value}</td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Col>\n          )}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}